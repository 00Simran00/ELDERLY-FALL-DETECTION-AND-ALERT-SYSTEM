/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Elderly Fall Detection with LCD + GY-61 + Heart Sensor + Buzzer
  ******************************************************************************
  */
/* USER CODE END Header */

#include "main.h"
#include <stdio.h>
#include <math.h>

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
I2C_HandleTypeDef hi2c1;

/* LCD I2C address */
#define LCD_ADDR        (0x27 << 1)

/* Accelerometer ADC values */
uint32_t adcX = 0, adcY = 0, adcZ = 0;
/* Heartbeat sensor ADC value */
uint32_t adcHeart = 0;

/* Fall detection thresholds */
#define FALL_THRESHOLD_LOW   500
#define FALL_THRESHOLD_HIGH  3000

/* Heartbeat thresholds (ADC values) */
#define HEART_LOW_THRESHOLD   400
#define HEART_HIGH_THRESHOLD  3000

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_ADC1_Init(void);
void Error_Handler(void);

/* ================= LCD FUNCTIONS ================= */
static void lcd_send_internal(char data, int flags)
{
    uint8_t data_u = (data & 0xF0);
    uint8_t data_l = ((data << 4) & 0xF0);
    uint8_t data_t[4];

    uint8_t BL = 0x08; // backlight ON

    data_t[0] = data_u | flags | 0x04 | BL;
    data_t[1] = data_u | flags | BL;
    data_t[2] = data_l | flags | 0x04 | BL;
    data_t[3] = data_l | flags | BL;

    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_t, 4, HAL_MAX_DELAY);
}

void lcd_send_cmd(char cmd)   { lcd_send_internal(cmd, 0x00); }
void lcd_send_data(char data) { lcd_send_internal(data, 0x01); }
void lcd_clear(void)          { lcd_send_cmd(0x01); HAL_Delay(2); }

void lcd_put_cur(int row, int col)
{
    if(row == 0) lcd_send_cmd(0x80 + col);
    else lcd_send_cmd(0xC0 + col);
}

void lcd_init(void)
{
    HAL_Delay(50);
    lcd_send_cmd(0x30); HAL_Delay(5);
    lcd_send_cmd(0x30); HAL_Delay(1);
    lcd_send_cmd(0x30); HAL_Delay(10);
    lcd_send_cmd(0x20); HAL_Delay(10);
    lcd_send_cmd(0x28); HAL_Delay(1);
    lcd_send_cmd(0x08); HAL_Delay(1);
    lcd_send_cmd(0x01); HAL_Delay(2);
    lcd_send_cmd(0x06); HAL_Delay(1);
    lcd_send_cmd(0x0C); HAL_Delay(1);
}

void lcd_send_string(char *str)
{
    while(*str) lcd_send_data(*str++);
}

/* ================= GY-61 (ADXL335 Analog) ================= */
void Read_Accelerometer(void)
{
    ADC_ChannelConfTypeDef sConfig = {0};

    // X axis (PA0)
    sConfig.Channel = ADC_CHANNEL_0;
    sConfig.Rank = 1;
    sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
    HAL_ADC_Start(&hadc1);
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
    adcX = HAL_ADC_GetValue(&hadc1);

    // Y axis (PA1)
    sConfig.Channel = ADC_CHANNEL_1;
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
    HAL_ADC_Start(&hadc1);
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
    adcY = HAL_ADC_GetValue(&hadc1);

    // Z axis (PA4)
    sConfig.Channel = ADC_CHANNEL_4;
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
    HAL_ADC_Start(&hadc1);
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
    adcZ = HAL_ADC_GetValue(&hadc1);

    HAL_ADC_Stop(&hadc1);
}

/* ================= HEART SENSOR (Analog) ================= */
void Read_Heart(void)
{
    ADC_ChannelConfTypeDef sConfig = {0};

    sConfig.Channel = ADC_CHANNEL_2; // PA2
    sConfig.Rank = 1;
    sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
    HAL_ADC_Start(&hadc1);
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
    adcHeart = HAL_ADC_GetValue(&hadc1);
    HAL_ADC_Stop(&hadc1);
}

/* ================= MAIN ================= */
int main(void)
{
    HAL_Init();
    SystemClock_Config();

    MX_GPIO_Init();
    MX_I2C1_Init();
    MX_ADC1_Init();

    lcd_init();

    lcd_put_cur(0,0);
    lcd_send_string("PROJECT:ELDERLY FALL DETECTION");
    lcd_put_cur(1,0);
    lcd_send_string("AND ALERT SYSTEM");
    HAL_Delay(2000);

    char line1[16];
    char line2[16];

    while(1)
    {
        Read_Accelerometer();
        Read_Heart();

        //float mag = sqrtf(adcX*adcX + adcY*adcY + adcZ*adcZ);

        lcd_clear();
        sprintf(line1,"X:%lu Y:%lu", adcX, adcY);
        sprintf(line2,"Z:%lu H:%lu", adcZ, adcHeart);

        lcd_put_cur(0,0);
        lcd_send_string(line1);
        lcd_put_cur(1,0);
        lcd_send_string(line2);

        // Reset buzzer
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

        // Fall detection
        if(adcZ>1)
        {
            lcd_clear();
            lcd_put_cur(0,0);
            lcd_send_string("FALL DETECTED!");
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Buzzer ON
        }

        // Heartbeat alert
        if(adcHeart < HEART_LOW_THRESHOLD && adcHeart > HEART_HIGH_THRESHOLD)
               {
                   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Buzzer ON
               }
               HAL_Delay(500);
    }
}

/* ================= CLOCK CONFIG ================= */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 168;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 4;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
    {
        Error_Handler();
    }
}

/* ================= GPIO ================= */
static void MX_GPIO_Init(void)
{
    __HAL_RCC_GPIOC_CLK_ENABLE();
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // PC13 as buzzer
    GPIO_InitStruct.Pin = GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
}

/* ================= I2C1 ================= */
static void MX_I2C1_Init(void)
{
    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000;
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    {
        Error_Handler();
    }
}

/* ================= ADC1 ================= */
static void MX_ADC1_Init(void)
{
    ADC_ChannelConfTypeDef sConfig = {0};

    hadc1.Instance = ADC1;
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
    hadc1.Init.ScanConvMode = DISABLE;
    hadc1.Init.ContinuousConvMode = DISABLE;
    hadc1.Init.DiscontinuousConvMode = DISABLE;
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    hadc1.Init.NbrOfConversion = 1;
    hadc1.Init.DMAContinuousRequests = DISABLE;
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
    {
        Error_Handler();
    }
}

/* ================= ERROR HANDLER ================= */
void Error_Handler(void)
{
    __disable_irq();
    while (1) {}
}
